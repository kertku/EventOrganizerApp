// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("Domain.App.BusinessUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegistryCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("BusinessUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93664c13-9749-4010-985c-54eab5632cb4"),
                            CompanyName = "Tublitöö As",
                            RegistryCode = 77443382
                        },
                        new
                        {
                            Id = new Guid("eafe2246-edcf-4126-9625-c76595e3f0a9"),
                            CompanyName = "Kõva Kate OÜ",
                            RegistryCode = 77443382
                        },
                        new
                        {
                            Id = new Guid("3900405e-86c3-46a7-85e9-d5ec890163de"),
                            CompanyName = "Teeme Tööd OÜ",
                            RegistryCode = 77443382
                        },
                        new
                        {
                            Id = new Guid("44434bcd-66b8-4aba-86e9-d4efdef97b49"),
                            CompanyName = "Testiminse AS",
                            RegistryCode = 77443382
                        });
                });

            modelBuilder.Entity("Domain.App.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63fa1ff3-fafe-4a91-bac6-c98e16550308"),
                            Date = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Osad räägivad, teised kuulavad.",
                            Location = "Ärimajas",
                            Name = "Suvine seminar"
                        },
                        new
                        {
                            Id = new Guid("dac4ddf3-4757-4e44-a3ea-5ffb004f97ae"),
                            Date = new DateTime(2022, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Osad räägivad, teised kuulavad.",
                            Location = "Linnahall",
                            Name = "Eilene üritus"
                        },
                        new
                        {
                            Id = new Guid("c8a8cc7a-fd48-4e71-943b-7b6d8efcb6ef"),
                            Date = new DateTime(2022, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Saame kokku ja kuulame",
                            Location = "Metsas",
                            Name = "Suvepäevad"
                        },
                        new
                        {
                            Id = new Guid("366c4a11-f6ee-41d2-974c-8ace37b2b39f"),
                            Date = new DateTime(2022, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Tasub kindlasti tulla kõigil.",
                            Location = "Aia 33, Tallinn",
                            Name = "Juhi sünnipäev"
                        });
                });

            modelBuilder.Entity("Domain.App.IndividualUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("IdentificationCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Information")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IndividualUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc1bf13d-f4e3-4c54-9194-e3928bc31e86"),
                            FirstName = "Kaupe",
                            IdentificationCode = 46611110222L,
                            Information = "tubli",
                            LastName = "Kask"
                        },
                        new
                        {
                            Id = new Guid("fea6f7f9-b715-4721-a6ec-c2d8cd6d3393"),
                            FirstName = "Piia",
                            IdentificationCode = 46311110222L,
                            Information = "Infot palju ei ole",
                            LastName = "Tulp"
                        },
                        new
                        {
                            Id = new Guid("3532f70f-fe35-422d-bc4c-cf2d1746ac49"),
                            FirstName = "Aivar",
                            IdentificationCode = 46411110222L,
                            Information = "test",
                            LastName = "Roos"
                        },
                        new
                        {
                            Id = new Guid("c044b9e0-9612-4bf9-8eac-9095081267c8"),
                            FirstName = "Kalle",
                            IdentificationCode = 46111110222L,
                            Information = "test",
                            LastName = "Sinilill"
                        });
                });

            modelBuilder.Entity("Domain.App.Participation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BusinessUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IndividualUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Information")
                        .HasMaxLength(5000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId");

                    b.HasIndex("EventId");

                    b.HasIndex("IndividualUserId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("Domain.App.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentTypeName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f8b3608-1e57-4514-856b-a5d8eaacb4fc"),
                            PaymentTypeName = "Kaardimakse"
                        },
                        new
                        {
                            Id = new Guid("fcc520cb-6653-463c-9508-0d0ebbbfcc59"),
                            PaymentTypeName = "Sularaha"
                        });
                });

            modelBuilder.Entity("Domain.App.Participation", b =>
                {
                    b.HasOne("Domain.App.BusinessUser", "BusinessUser")
                        .WithMany("Participations")
                        .HasForeignKey("BusinessUserId");

                    b.HasOne("Domain.App.Event", "Event")
                        .WithMany("Participations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.App.IndividualUser", "IndividualUser")
                        .WithMany("Participations")
                        .HasForeignKey("IndividualUserId");

                    b.HasOne("Domain.App.PaymentType", "PaymentType")
                        .WithMany("Participations")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BusinessUser");

                    b.Navigation("Event");

                    b.Navigation("IndividualUser");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Domain.App.BusinessUser", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Domain.App.Event", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Domain.App.IndividualUser", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("Domain.App.PaymentType", b =>
                {
                    b.Navigation("Participations");
                });
#pragma warning restore 612, 618
        }
    }
}
